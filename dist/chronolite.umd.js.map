{"version":3,"file":"chronolite.umd.js","sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../chronolite.js"],"sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = (function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar iteratorSymbol = Symbol.iterator;\n\t\tif (iteratorSymbol && (iteratorSymbol in target)) {\n\t\t\tvar iterator = target[iteratorSymbol](), step, pact, reject;\n\t\t\tfunction _cycle(result) {\n\t\t\t\ttry {\n\t\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (pact) {\n\t\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpact = result;\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t_cycle();\n\t\t\tif (iterator.return) {\n\t\t\t\tvar _fixup = function(value) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\t\titerator.return();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t}\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (pact && pact.then) {\n\t\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t_fixup();\n\t\t\t}\n\t\t\treturn pact;\n\t\t}\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"value is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof Symbol !== \"undefined\") {\n\t\tvar asyncIteratorSymbol = Symbol.asyncIterator;\n\t\tif (asyncIteratorSymbol && (asyncIteratorSymbol in target)) {\n\t\t\tvar pact = new _Pact();\n\t\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\treturn pact;\n\t\t\tfunction _resumeAfterBody(result) {\n\t\t\t\tif (check && !check()) {\n\t\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t\t}\n\t\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t\t}\n\t\t\tfunction _resumeAfterNext(step) {\n\t\t\t\tif (step.done) {\n\t\t\t\t\t_settle(pact, 1);\n\t\t\t\t} else {\n\t\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction _reject(error) {\n\t\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t\t}\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = (function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype[Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))] = function() {\n\t\treturn this;\n\t};\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","export default class chronolite {\n\n\tconstructor() {\n\t\tthis.defaultIterations = 20;\n\t}\n\n\tvalidInput(obj) {\n\n\t\tconst objStr = JSON.stringify(obj);\n\t\tif (obj === undefined) {\n\t\t\treturn [false, \"passed object is undefined: \" + objStr];\n\t\t}\n\t\tif (typeof obj.fn !== \"function\") {\n\t\t\treturn [false, \"function (fn) is not a function type: \" + objStr];\n\t\t}\n\t\tif (obj.fnArgs !== undefined && !Array.isArray(obj.fnArgs)) {\n\t\t\treturn [false, \"function args (fnArgs) is not an array: \" + objStr];\n\t\t}\n\t\tif (obj.binding !== undefined && typeof obj.binding !== \"object\") {\n\t\t\treturn [false, \"binding is defined but not an object (got \" +\n\t\t\t\t\ttypeof obj + \") with value: \" + objStr];\n\t\t}\n\t\treturn [true, \"\"];\n\n\t}\n\n\t// Time code\n\t_setup(fnToTime) {\n\t\tconst valid = this.validInput(fnToTime);\n\n\t\tif (!valid[0]) {\n\t\t\tthrow Error(valid[1]);\n\t\t}\n\t\t\n\t\tfnToTime.binding = (fnToTime.binding === undefined) ? null : fnToTime.binding;\n\t}\n\n\t_emptyTimeResult() {\n\t\treturn {\n\t\t\ttotalTime: 0,\n\t\t\taverageTime: Infinity,\n\t\t\tfastestTime: Infinity,\n\t\t\tslowestTime: -Infinity,\n\t\t};\n\t}\n\n\t_compareTimes(iterationTime, result) {\n\t\tif (iterationTime < result.fastestTime) {\n\t\t\tresult.fastestTime = iterationTime;\n\t\t}\n\t\tif (iterationTime > result.slowestTime) {\n\t\t\tresult.slowestTime = iterationTime;\n\t\t}\n\n\t\tresult.totalTime += iterationTime;\n\t}\n\n\ttime(fnToTime, iterations) {\n\n\t\titerations = iterations || this.defaultIterations;\n\t\tthis._setup(fnToTime);\n\t\tconst result = this._emptyTimeResult();\n\n\t\tfor (let i = 0; i < iterations; i++) {\n\n\t\t\tconst start = new Date();\n\t\t\tfnToTime.fn.apply(fnToTime.binding, fnToTime.fnArgs);\n\t\t\tconst end = new Date();\n\n\t\t\tconst iterationTime = end - start;\n\t\t\tthis._compareTimes(iterationTime, result);\n\n\t\t}\n\n\t\tresult.averageTime = result.totalTime / iterations;\n\n\t\treturn result;\n\n\t}\n\n\tasync timeAsync(fnToTime, iterations) {\n\t\t\n\t\titerations = iterations || this.defaultIterations;\n\t\tthis._setup(fnToTime);\n\t\tconst result = this._emptyTimeResult();\n\n\t\tfor (let i = 0; i < iterations; i++) {\n\n\t\t\tconst start = new Date();\n\t\t\tawait fnToTime.fn.apply(fnToTime.binding, fnToTime.fnArgs);\n\t\t\tconst end = new Date();\n\n\t\t\tconst iterationTime = end - start;\n\t\t\tthis._compareTimes(iterationTime, result);\n\n\t\t}\n\n\t\tresult.averageTime = result.totalTime / iterations;\n\n\t\treturn result;\n\t\n\t}\n\n\t// Comparison Code\n\n\t_handleComparison(time, result, index, objId) {\n\t\ttime.id = objId;\n\t\tif (time.averageTime < result.fastestAverageTime) {\n\t\t\tresult.fastestIndex = index;\n\t\t\tresult.fastestId = time.id;\n\t\t\tresult.fastestAverageTime = time.averageTime;\n\t\t}\n\t\tresult.timeTaken[index] = time;\n\t}\n\n\t_emptyCompareResult() {\n\t\treturn {\n\t\t\tfastestIndex: undefined,\n\t\t\tfastestId: undefined,\n\t\t\tfastestAverageTime: Infinity,\n\t\t\ttimeTaken: [],\n\t\t};\n\t}\n\n\tcompare(fnsToCompare, iterations) {\n\t\t\n\t\titerations = iterations || this.defaultIterations;\n\t\tconst result = this._emptyCompareResult();\n\t\n\t\tfor (let i =0; i < fnsToCompare.length; i++) {\n\t\t\tconst fnObj = fnsToCompare[i];\n\t\t\tconst time = this.time(fnObj, iterations);\n\t\t\tthis._handleComparison(time, result, i, fnObj.id);\n\t\t}\n\n\t\tif (result.fastestId === undefined) delete result.fastestId;\n\n\t\treturn result;\n\n\t}\n\n\tasync compareAsync(fnsToCompare, iterations) {\n\n\t\titerations = iterations || this.defaultIterations;\n\t\tconst result = this._emptyCompareResult();\n\t\n\t\tfor (let i = 0; i < fnsToCompare.length; i++) {\n\t\t\tconst fnObj = fnsToCompare[i];\n\t\t\tconst time = await this.timeAsync(fnObj, iterations);\n\t\t\tthis._handleComparison(time, result, i, fnObj.id);\n\t\t}\n\n\t\tif (result.fastestId === undefined) delete result.fastestId;\n\n\t\treturn result;\n\n\t}\n\n};\n"],"names":["_Pact","prototype","then","onFulfilled","onRejected","result","state","this","s","callback","_settle","v","e","o","_this","value","pact","bind","observer","_isSettledPact","thenable","_earlyReturn","_AsyncGenerator","entry","_entry","_pact","_resolve","_return","_promise","_wrapReturnedValue","done","_wrapYieldedValue","Symbol","asyncIterator","_yield","next","Promise","resolve","returnValue","error","return","throw","reject","chronolite","constructor","defaultIterations","validInput","obj","objStr","JSON","stringify","undefined","fn","fnArgs","Array","isArray","binding","_setup","fnToTime","valid","Error","_emptyTimeResult","Infinity","_compareTimes","iterationTime","fastestTime","slowestTime","totalTime","time","iterations","i","start","Date","apply","end","averageTime","timeAsync","test","update","body","stage","shouldContinue","updateValue","_resumeAfterTest","_resumeAfterBody","_resumeAfterUpdate","_handleComparison","index","objId","id","fastestAverageTime","fastestIndex","fastestId","timeTaken","_emptyCompareResult","compare","fnsToCompare","length","fnObj","compareAsync","_this2","array","_cycle","check","Pact"],"mappings":"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"}