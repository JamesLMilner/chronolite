{"version":3,"file":"chronolite.umd.js","sources":["../chronolite.js"],"sourcesContent":["\nexport default (() => {\n\n    this.time = (fn, fnArgs, iterations) => {\n\n        if (iterations === undefined) {\n            iterations = 20;\n        }\n\n        if (!Array.isArray(fnArgs)) {\n            throw Error(\"function arguments is not an array\");\n        }\n        \n        let totalTime = 0;\n\n        for (let i = 0; i < iterations; i++) {\n            const iterationTime = (()=> {\n                const start = new Date();\n                fn.apply(null, fnArgs);\n                const end = new Date();\n                return end - start;\n            })();\n\n            totalTime += iterationTime;\n        } \n\n        return totalTime / iterations;\n    \n    },\n\n    this.compare = (fnOne, fnArgs1, fnTwo, fnTwoArgs) => {\n        const first = this.time(fnOne, fnArgs, 10);\n        const second = this.time(fnOne, fnArgs, 10);\n        return {\n            faster: first < second,\n            firstFnTime: first,\n            secondFnTime: first,\n            fastestTime: (first < second) ? first : second,\n        };\n    }\n\n    return {\n        compare: this.compare,\n        time: this.time,\n    }\n\n})();"],"names":["this","time","fn","fnArgs","iterations","undefined","Array","isArray","Error","let","start","totalTime","i","Date","apply","compare","fnOne","fnArgs1","fnTwo","fnTwoArgs","const","first","second","faster","firstFnTime","secondFnTime","fastestTime"],"mappings":"6LAGIA,EAAKC,cAAQC,EAAIC,EAAQC,GAMrB,QAJmBC,IAAfD,IACAA,EAAa,KAGZE,MAAMC,QAAQJ,GACf,MAAMK,MAAM,sCAKhB,IAFAC,IAIcC,EAJVC,EAAY,EAEPC,EAAI,EAAGA,EAAIR,EAAYQ,IAQ5BD,IANUD,EAAQ,IAAIG,KAClBX,EAAGY,MAAM,KAAMX,GACH,IAAIU,KACHH,GAMrB,OAAOC,EAAYP,GAIvBJ,EAAKe,iBAAWC,EAAOC,EAASC,EAAOC,GACnCC,IAAMC,EAAQrB,EAAKC,KAAKe,EAAOb,OAAQ,IACjCmB,EAAStB,EAAKC,KAAKe,EAAOb,OAAQ,IACxC,OACIoB,OAAQF,EAAQC,EAChBE,YAAaH,EACbI,aAAcJ,EACdK,YAAcL,EAAQC,EAAUD,EAAQC,KAK5CP,QAASf,EAAKe,QACdd,KAAMD,EAAKC"}